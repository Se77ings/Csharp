@page "/lista"

@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims
@using Wishlist.Components.Lista
@using Wishlist.Data

@implements IAsyncDisposable

@inject IDbContextFactory<Wishlist.Data.ApplicationDbContext> DbFactory
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager
@inject IHttpContextAccessor httpContextAccessor

@rendermode InteractiveServer

<PageTitle>Index</PageTitle>

<h1>Index</h1>

<p>
    <a href="lista/create">Create New</a>
</p>

@* Não consegui achar uma boa forma para exibir apenas os itens pertencentes à este usuário.. mas pelo menos sinto que estou no caminho. *@

@if (listaDoUsuario != null)
{

    foreach (var item in listaDoUsuario.Where(p => p.UserId == userId).OrderBy(p => p.UserId).ThenBy(p => p.Prioridade))
    {
        <div class="card w-50 d-flex flex-row my-3 justify-content-between">
            <div class="px-3 py-2 d-flex flex-column justify-content-evenly border-right" style="background-color: rgb(240,240,240)">
                <button class="btn btn-outline-primary" @onclick="()=>Incremento(item)"><span class="fa fa-arrow-up"></span></button>
                <p class="m-0 p-0 text-center">@item.Prioridade</p>
                <button class="btn btn-outline-primary" @onclick="()=> Decremento(item)"><span class="fa fa-arrow-down"></span></button>
            </div>
            <div class="w-75 align-self-center">
                <p class="m-2 p-0">Descrição: @item.Name</p>
                <p class="m-2 p-0">R$: @item.Valor</p>
            </div>
            <div class="align-self-center d-flex flex-column mx-2 p-2">
                <NavLink class="btn btn-primary" href="@($"lista/edit?id={item.Id}")"><span class="fa fa-pencil"></span></NavLink>
                <NavLink class="btn btn-warning my-2" href="@($"lista/details?id={item.Id}")"><span class="fa fa-search"></span></NavLink>
                <NavLink class="btn btn-danger" href="@($"lista/delete?id={item.Id}")"><span class="fa fa-trash"></span></NavLink>

                @* <p class="p-0 m-0">U: @item.UserId.Substring(0, 2)</p> *@
            </div>
        </div>
    }
}
else
{
    <p>Carregando.....</p>
    @* <a href="@($"lista/edit?id={lista.Id}")">Edit</a>
< a href = "@($"lista / details ? id ={ lista.Id}")" > Details </ a >
< a href = "@($"lista / delete ? id ={ lista.Id}")" > Delete </ a > *@

}

@code {
    private ApplicationDbContext context = default!;
    private IQueryable<Lista>? listaDoUsuario { get; set; }
    public string? userId { get; set; }
    protected override async Task OnInitializedAsync()
    {
        context = DbFactory.CreateDbContext();
        userId = httpContextAccessor.HttpContext?.User?.FindFirst(ClaimTypes.NameIdentifier)?.Value;

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            var appUser = await UserManager.GetUserAsync(user);
            if (appUser != null)
            {
                // listaDoUsuario = context.Lista.Where(p => p.UserId.ToString() != appUser.Id);
                listaDoUsuario = context.Lista.Where(p => p.UserId.ToString() != "appUser.Id");

            }
        }

    }
    private void Incremento(Lista item)
    {
        item.AumentarPrioridade();
        context.Update(item);
        context.SaveChanges();


    }
    private void Decremento(Lista item)
    {

        item.DiminuirPrioridade();
        context.Update(item);
        context.SaveChanges();
    }
    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}